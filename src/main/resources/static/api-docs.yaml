openapi: 3.0.1
info:
  title: ops-sac-backoffice
  description: OPS SAC BACKOFFICE
  contact:
    name: OPS SAC BACKOFFICE
  version: '1.0'
externalDocs:
  description: Docs
  url: https://frubana.atlassian.net/wiki/spaces/OPS/pages/3049455621/ops-sac-backoffice
servers:
  - url: http://localhost:8080
    description: Local
  - url: https://ops-sac-backoffice-operations.development.microservices.frubana.com
    description: Develop
  - url: https://ops-sac-backoffice-operations.qa.microservices.frubana.com
    description: Quality
  - url: https://ops-sac-backoffice-operations.production.microservices.frubana.com
    description: Production
tags:
  - name: customers
    description: Customers Controller
paths:
  /customers:
    post:
      tags:
        - customers
      operationId: post
      summary: Create customer
      description: Create customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        '201':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                CustomerAlreadyExists:
                  summary: Customer already exists
                  value:
                    message: "Customer already exists"
                    code: 102
                BadRequest:
                  summary: Bad Request
                  value: {
                    "message": "Bad Request",
                    "code": 400
                  }
              schema:
                $ref: '#/components/schemas/BadRequest'
  /customers/bulk-create:
    post:
      tags:
        - customers
      operationId: createCustomers
      summary: Create customers
      description: Create customers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Done'
  /customers/{id}:
    get:
      tags:
        - customers
      operationId: get
      summary: Get customer
      description: Get customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1234"
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Not Found
          content:
            application/json:
              example: {
                "message": "Customer not found",
                "code": 101
              }
    delete:
      tags:
        - customers
      operationId: delete
      summary: Delete customer
      description: Delete customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "1234"
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Done'
        '404':
          description: Not Found
          content:
            application/json:
              example: {
                "message": "Customer not found",
                "code": 101
              }
components:
  schemas:
    CustomerDTO:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: "1234"
    Customer:
      type: object
      properties:
        id:
          type: string
          example: "1234"
    Done:
      type: object
    BadRequest:
      type: object
      properties:
        message:
          type: string
          description: Bad Request
          example: Bad Request
        code:
          type: integer
          description: The error status
          format: int32
          example: 400
    NotFound:
      type: object
      properties:
        message:
          type: string
          example: Not found
        code:
          type: number
          example: 404
